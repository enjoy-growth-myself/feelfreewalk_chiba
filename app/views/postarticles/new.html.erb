<div class="container">
    <div class="row">
        <h2 class="col-6 offset-3 edit-title">新規登録</h2>
    </div>
    <%= form_with(model: @postarticle, local: true) do |form| %>
    <div class="row">
        <div class="col-6 offset-3 edit-field ">
            <%= render 'layouts/error_messages', error: @postarticle %>
            <p class="post-text">タイトル(16文字以内)</p>
            <%= form.text_field :title, class: 'form-control'  %>

            <p class="post-text" rows="">本文</p>
            <%= form.text_area :body, class: "form-control input-lg" , size: "20x20" %>
            <P class="post-text">写真は<%= $image_par_article %>枚まで投稿できます</P>
            <p><%= form.attachment_field :postarticle_images_images, multiple: true %></p>

            <img id="preview0" style="width:20%;">
            <img id="preview1" style="width:20%;">
            <img id="preview2" style="width:20%;">

             <p class="post-text">住所(googlemapからも入力できます)</p>
            <%= form.text_field :address, class: 'form-control search-address' %><br>

            <input type="button" value="googlemapに場所を表示" onclick="codeAddress()">
            <p class="post-text">緯度</p>
            <%= form.text_field :latitude, class: 'form-control' %>

            <p class="post-text">経度</p>
            <%= form.text_field :longitude, class: 'form-control' %>
            <div class="actions">
                <%= form.submit "新規投稿", class: "btn btn-primary pull-right" %>
            </div>
        </div>
        <% end %>
    </div>
</div>


<script>
let maxImage = "<%= $image_par_article %>"
$('#postarticle_postarticle_images_images').on('change', function (e) {
    if(e.target.files.length > maxImage){
      alert(`1つの記事の投稿できる写真は${maxImage}枚までです。`);
      // 選択したファイルをリセット
      document.getElementById("postarticle_postarticle_images_images").value = "";
      // 画像のプレビューが残っていた場合は、
      // リセットしないと選択できていると勘違いを誘発するため初期化。
      for( var i=0; i < maxImage; i++) {
        $(`#preview${i}`).attr('src', "");
      }
    }else{
      let reader = new Array(maxImage);
      // 画像選択を二回した時、一回目より数が少なかったりすると画面上に残るので初期化
      for( let i=0; i < maxImage; i++) {
        $(`#preview${i}`).attr('src', "");
      }
      for(let i=0; i<e.target.files.length; i++) {
        reader[i] = new FileReader();
        reader[i].onload = finisher(i,e); 
        reader[i].readAsDataURL(e.target.files[i]);
        // onloadは別関数で準備しないとfor文内では使用できないので、関数を準備。
        function finisher(i,e){
          return function(e){
          $(`#preview${i}`).attr('src', e.target.result);
          console.log(`#preview${i}`);
          }
        }
      }
  }
});
</script>


<div class="row">
    <div class="col-6 offset-3">
        <h3>googlemapから住所入力</h3>
        <div id='map'></div>
    </div>
</div>

<style>
/*エラーチェック用*/

#map{
  height: 750px;
  width: 750px;
}
</style>

<script>

let map
let geocoder

const display = document.getElementById('display')

function initMap(){
  // geoccoderを初期化
  geocoder = new google.maps.Geocoder()
  // 新しいmapを用意
  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 35.6071334, lng: 140.1052183},
    zoom: 15,
  });

  // 新規投稿なので初期マーカーは不要
  // marker = new google.maps.Marker({
  //   position: {lat: 35.6071334, lng: 140.1052183},
  //   map: map
  // });

  // クリックイベントを追加
  let address;
   map.addListener('click', function(e) {
        geocoder.geocode({
          location: e.latLng
        }, function(results, status) {
        	address = results[0].formatted_address;
          if (status !== 'OK') {
            alert('Failed: ' + status);
            return;
          }
          // results[0].formatted_address
          if (results[0]) {
            new google.maps.Marker({
               position: e.latLng,
 	           map: map,
               title: results[0].formatted_address,
               animation: google.maps.Animation.DROP
            });
          } else {
            alert('No results found');
            return;
          }
          document.getElementById('postarticle_latitude').value = e.latLng.lat();
          document.getElementById('postarticle_longitude').value = e.latLng.lng();
          document.getElementById('postarticle_address').value = address;
        });
      });
    }

$('#postarticle_address').on('change', function (){
  let inputAddress = getElementById('postarticle_address').value;

  geocoder.geocode( { 'postarticle_address': inputAddress}, function(results, status) {
    if (status == 'OK') {
      map.setCenter(results[0].geometry.location);
      var marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
      });
      display.textContent = "検索結果：" + results[ 0 ].geometry.location
    } else {
      alert('該当する場所がありませんでした：' + status);
    }
  });   
  });






</script>
<script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=<%= ENV['GOOGLE_MAP_API_KEY'] %>&callback=initMap" async defer></script>